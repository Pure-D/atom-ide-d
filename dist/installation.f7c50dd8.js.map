{"mappings":"sVA0BSA,EAAkBC,UAClBC,EAAWD,GAGaE,eAClBC,EAAiBC,WAGZC,SAAY,QAAZA,SADMC,EAASF,EAAI,gBAAkBG,OAC9BC,MAAK,qBAAc,IAA1BH,OAA+B,EAA/BA,EAA6B,SAEtCI,eACPC,QAAQC,MAAMF,mBA+BIG,UACdC,EAAaC,EAAKC,EAAQC,WAAS,QAGnCC,EAAiB,WADc,UAAhBC,QAAQC,SAAoB,OAAS,IAGpDC,EAAsBN,EAAKD,EAAU,GAAKK,QAAQC,YAAYD,QAAQG,QAEtEC,wBApEAC,EAAOL,QAAQM,IAAIC,QACV,iBAAJF,GAAyB,KAAJA,GAA+B,UAAhBL,QAAQC,sBAC3ClB,EAAWa,EAAKS,EAAI,SAAU,UAC/BT,EAAKS,EAAI,SAAU,QAAS,SAAU,OAEtCT,EAAKS,EAAI,UAAW,UAEJ,UAAhBL,QAAQC,SAAoB,OAC/BO,EAAUR,QAAQM,IAAIG,WACV,iBAAPD,GAA+B,KAAPA,EAAO,OACjCZ,EAAKY,EAAO,SAAU,eAEX,iBAAJH,GAAyB,KAAJA,EAAI,OAClCT,EAAKS,EAAI,UAAW,iBAuDAK,GACvB5B,EAAac,EAAKQ,EAAgBL,MAEpCG,EAAmB,OACfS,EAAoBf,EAAKM,EAAqBH,SACxClB,EAAkBC,SAvCwCE,OAC1C4B,EAAmBC,WAE3CC,QAAuBC,EAAA,UACtBC,EAAcC,SAAuBC,QAAQC,IAAG,CAAElC,EAAiB2B,GAAY3B,EAAiB4B,WAElF,iBAAZG,GACa,iBAAbC,GACK,KAAZD,GACa,KAAbC,IAEsD,IAA/CH,EAAcE,EAAcC,IA4BmBG,CAAiBtC,EAAY6B,gBArB7DT,EAA6BE,gBAC7CiB,SAAeC,+DACvBC,KAAKC,cAAcC,QAAO,0CAEpBJ,EAAKnB,EAAqBE,EAAc,CAAIsB,WAAW,IAC7DH,KAAKC,cAAcG,WAAU,oCAiBnBC,CAAW1B,EAAqBE,cAG5BvB,EAAkBC,IAC5ByC,KAAKC,cAAcK,SAAQ,uCACc7B,QAAQC,sEACGG,+BAIjDtB,8GAvFHM,EAAW0C,EAAUC,kCCL3BC,EAAAC,QAAkBf,QAAQgB,QAAOC,QAAA,2DAAsFC,MAAI,IAAOrB,EAAa","sources":["src/installation.ts","node_modules/.pnpm/@parcel+runtime-js@2.0.0-beta.3.1/node_modules/@parcel/runtime-js/lib/runtime-54df1a8afcdce548c861cd5183a5d974.js"],"sourcesContent":["import { pathExists } from \"fs-extra\"\nimport { join, dirname } from \"path\"\n\nimport { execFile as execFileRaw } from \"child_process\"\nimport { promisify } from \"util\"\nconst execFile = promisify(execFileRaw)\n\nasync function getCodeDBinFolder() {\n  const home = process.env.HOME\n  if (typeof home === \"string\" && home !== \"\" && process.platform === \"linux\") {\n    if (await pathExists(join(home, \".local\", \"share\"))) {\n      return join(home, \".local\", \"share\", \"code-d\", \"bin\")\n    } else {\n      return join(home, \".code-d\", \"bin\")\n    }\n  } else if (process.platform === \"win32\") {\n    const appdata = process.env.APPDATA\n    if (typeof appdata === \"string\" && appdata !== \"\") {\n      return join(appdata, \"code-d\", \"bin\")\n    }\n  } else if (typeof home === \"string\" && home !== \"\") {\n    return join(home, \".code-d\", \"bin\")\n  }\n  return \"\"\n}\n\nfunction isServeDInstalled(serveDPath: string) {\n  return pathExists(serveDPath)\n}\n\n/** Get the version of serve-d */\nasync function getServeDVersion(file: string) {\n  try {\n    const output = (await execFile(file, [\"--version\"])).stderr\n    const version = output.match(/v(\\d\\S*)\\s/)?.[1]\n    return version\n  } catch (e) {\n    console.error(e)\n    return undefined\n  }\n}\n\n/** Check if the given serve-d is up to date against the target version */\nasync function isServeDUpToDate(givenFile: string, targetFile: string) {\n  // @ts-ignore\n  const semverCompare = (await import(\"semver/functions/compare\")) as typeof import(\"semver/functions/compare\")\n  const [givenVersion, targetVersion] = await Promise.all([getServeDVersion(givenFile), getServeDVersion(targetFile)])\n  if (\n    typeof givenVersion === \"string\" &&\n    typeof targetVersion === \"string\" &&\n    givenVersion !== \"\" &&\n    targetVersion !== \"\"\n  ) {\n    return semverCompare(givenVersion, targetVersion) !== -1\n  } else {\n    // assume given version is old\n    return false\n  }\n}\n\nasync function copyServeD(bundledServerFolder: string, codeDBinFolder: string) {\n  const { copy } = await import(\"fs-extra\")\n  atom.notifications.addInfo(\"Installing/Updating D servers...\")\n  // copy the whole served folder\n  await copy(bundledServerFolder, codeDBinFolder, { overwrite: true })\n  atom.notifications.addSuccess(\"D servers was installed/updated\")\n}\n\nexport async function installServeD() {\n  const distFolder = join(dirname(__dirname), \"dist\")\n\n  const exeExtention = process.platform === \"win32\" ? \".exe\" : \"\"\n  const serveDExeFileName = `serve-d${exeExtention}`\n\n  const bundledServerFolder = join(distFolder, `${process.platform}-${process.arch}`)\n\n  const codeDBinFolder = await getCodeDBinFolder()\n  const serveDPath = join(codeDBinFolder, serveDExeFileName)\n\n  if (bundledServerFolder) {\n    const bundledServeDPath = join(bundledServerFolder, serveDExeFileName)\n    if (!(await isServeDInstalled(serveDPath)) || !(await isServeDUpToDate(serveDPath, bundledServeDPath))) {\n      await copyServeD(bundledServerFolder, codeDBinFolder)\n    }\n  } else {\n    if (!(await isServeDInstalled(serveDPath))) {\n      atom.notifications.addError(\n        `serve-d binary is not available for ${process.platform}.\n        Please built it from the source, place it under ${codeDBinFolder}, and restart Atom.`\n      )\n    }\n  }\n  return serveDPath\n}\n","module.exports = (Promise.resolve(__parcel__require__(\"./\" + \"compare.2ebd832c.js\"))).then(() => parcelRequire('5PzzV'));"],"names":["$cba7abbdfc042951cbd6213878ea3ff4$var$isServeDInstalled","serveDPath","$3PtFj$pathExists","async","$cba7abbdfc042951cbd6213878ea3ff4$var$getServeDVersion","file","ref","$cba7abbdfc042951cbd6213878ea3ff4$var$execFile","stderr","match","e","console","error","$cba7abbdfc042951cbd6213878ea3ff4$export$5109a6445e36b1c","distFolder","$3PtFj$join","$3PtFj$dirname","__dirname","serveDExeFileName","process","platform","bundledServerFolder","arch","codeDBinFolder","home","env","HOME","appdata","APPDATA","$cba7abbdfc042951cbd6213878ea3ff4$var$getCodeDBinFolder","bundledServeDPath","givenFile","targetFile","semverCompare","parcelRequire","givenVersion","targetVersion","Promise","all","$cba7abbdfc042951cbd6213878ea3ff4$var$isServeDUpToDate","copy","$cba7abbdfc042951cbd6213878ea3ff4$importAsync$5f67160147d256a6","atom","notifications","addInfo","overwrite","addSuccess","$cba7abbdfc042951cbd6213878ea3ff4$var$copyServeD","addError","$3PtFj$promisify","$3PtFj$execFile","module","exports","resolve","require","then"],"version":3,"file":"installation.f7c50dd8.js.map"}