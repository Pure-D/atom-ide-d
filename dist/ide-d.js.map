{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA,cAAc,GAAI,OAAO,CAAC,OAAO,UAAqB,gDAAuD,IAAI,IAAI,KAAO,aAAa,EAAC,KAAO;;;;;;;ACAjJ,cAAc,GAAI,OAAO,CAAC,OAAO,UAAqB,2CAAkD,IAAI,IAAI,KAAO,aAAa,EAAC,KAAO;;;;;;MFEtI,qCAAe,SAAS,4CAAkB;UACxC,QAAQ,GAAG,CAAC;QAChB,KAAK,CAAC,QAAQ;QACd,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAC,aAAe,IAAG,CAAC;YACpD,EAA2B,AAA3B,yBAA2B;YAC3B,EAA8D,AAA9D,4DAA8D;yBACjD,wBAA2B,EAAE,OAAO,EAAC,KAAO,GAAE,IAAI;YAC/D,EAAqB,AAArB,mBAAqB;YACrB,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAC,aAAe;YAC3C,IAAI,CAAC,aAAa,CAAC,UAAU,EAAC,iDAAmD;QACnF,CAAC;IACH,CAAC;IAED,EAA2C,AAA3C,uCAA2C,AAA3C,EAA2C,CAC3C,gBAAgB,GAAG,CAAC;;aACV,QAAU;aAAE,CAAG;;IACzB,CAAC;IACD,eAAe,GAAG,CAAC;gBACV,CAAG;IACZ,CAAC;IACD,aAAa,GAAG,CAAC;gBACR,OAAS;IAClB,CAAC;IAED,iBAAiB,GAAY,CAAC;gBACrB,KAAO;IAChB,CAAC;IACD,EAA0C,AAA1C,sCAA0C,AAA1C,EAA0C,OAEpC,kBAAkB,CAAC,WAAmB,EAAE,CAAC;QAC7C,EAAuC,AAAvC,qCAAuC;QACvC,KAAK,kBAAG,aAAa,YAAW,wBAAwB;QAExD,KAAK,CAAC,UAAU,SAAS,aAAa;QAEtC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,UAAU;aAAG,SAAW;aAAE,UAAY;;YAC/D,GAAG,EAAE,WAAW;;eAGX,MAAM;IACf,CAAC;;AAGH,cAAc,GAAG,GAAG,CAAC,qCAAe","sources":["src/ide-d.ts","node_modules/@parcel/runtime-js/lib/runtime-757437068710879e.js","node_modules/@parcel/runtime-js/lib/runtime-f9e853773e43e8f4.js"],"sourcesContent":["import { AutoLanguageClient } from \"atom-languageclient\"\n\nclass DLanguageClient extends AutoLanguageClient {\n  async activate() {\n    super.activate()\n    if (!atom.packages.isPackageLoaded(\"atom-ide-base\")) {\n      // install if not installed\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      await (await import(\"atom-package-deps\")).install(\"ide-d\", true)\n      // enable if disabled\n      atom.packages.enablePackage(\"atom-ide-base\")\n      atom.notifications.addSuccess(\"ide-d: atom-ide-base was installed and enabled...\")\n    }\n  }\n\n  /* eslint-disable class-methods-use-this */\n  getGrammarScopes() {\n    return [\"source.d\", \"D\"]\n  }\n  getLanguageName() {\n    return \"D\"\n  }\n  getServerName() {\n    return \"serve-d\"\n  }\n\n  getConnectionType(): \"stdio\" {\n    return \"stdio\"\n  }\n  /* eslint-enable class-methods-use-this */\n\n  async startServerProcess(projectPath: string) {\n    // import only when a D file is opened.\n    const { installServeD } = await import(\"./installation\")\n\n    const serveDPath = await installServeD()\n\n    const serveD = super.spawn(serveDPath, [\"--require\", \"workspaces\"], {\n      cwd: projectPath,\n    })\n\n    return serveD\n  }\n}\n\nmodule.exports = new DLanguageClient()\n","module.exports = (Promise.resolve(__parcel__require__(\"./\" + \"atom-package-deps.7b276538.js\"))).then(() => parcelRequire('lLugl'));","module.exports = (Promise.resolve(__parcel__require__(\"./\" + \"installation.6c1a001e.js\"))).then(() => parcelRequire('k0amS'));"],"names":[],"version":3,"file":"ide-d.js.map"}