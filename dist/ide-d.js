var e=require("atom-languageclient"),a=require("atom-package-deps"),r="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},t={},n={},s=r.parcelRequireaf25;null==s&&((s=e=>{if(e in t)return t[e].exports;if(e in n){var a=n[e];delete n[e];var r={id:e,exports:{}};return t[e]=r,a.call(r.exports,r,r.exports),r.exports}var s=Error("Cannot find module '"+e+"'");throw s.code="MODULE_NOT_FOUND",s}).register=(e,a)=>{n[e]=a},r.parcelRequireaf25=s),s.register("hngDo",((e,a)=>{e.exports=Promise.resolve(require("./installation.433c2925.js")).then((()=>s("1xhaw")))})),module.exports=new class extends e.AutoLanguageClient{async activate(){super.activate(),atom.packages.isPackageLoaded("atom-ide-base")||(await(await a).install("ide-d",!0),atom.packages.enablePackage("atom-ide-base"),atom.notifications.addSuccess("ide-d: atom-ide-base was installed and enabled..."))}getGrammarScopes(){return["source.d","D"]}getLanguageName(){return"D"}getServerName(){return"serve-d"}getConnectionType(){return"stdio"}async startServerProcess(e){const{installServeD:a}=await s("hngDo"),r=await a();return super.spawn(r,["--require","workspaces"],{cwd:e})}};
//# sourceMappingURL=ide-d.js.map
