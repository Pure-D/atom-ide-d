{"mappings":"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","sources":["node_modules/.pnpm/semver@7.3.5/node_modules/semver/functions/compare.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/classes/semver.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/debug.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/constants.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/re.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/parse-options.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/identifiers.js"],"sourcesContent":["const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier)\n        this.inc('pre', identifier)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier)\n        }\n        this.inc('pre', identifier)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (this.prerelease[0] === identifier) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0]\n            }\n          } else {\n            this.prerelease = [identifier, 0]\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format()\n    this.raw = this.version\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\nmodule.exports = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER,\n  MAX_SAFE_COMPONENT_LENGTH\n}\n","const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\n","// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl']\nconst parseOptions = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((options, k) => {\n    options[k] = true\n    return options\n  }, {})\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers\n}\n"],"names":["module","exports","a","b","loose","$3FN2j","compare","$6kOFi","MAX_LENGTH","MAX_SAFE_INTEGER","$5HwW3","t","re","compareIdentifiers","$78b7b712d16b89801a904c7270c1e2c9$var$SemVer","version","options","$7eIUa","includePrerelease","TypeError","length","$78b7b712d16b89801a904c7270c1e2c9$require$MAX_LENGTH","$6iPE3","m","trim","match","$78b7b712d16b89801a904c7270c1e2c9$require$re","$78b7b712d16b89801a904c7270c1e2c9$require$t","LOOSE","FULL","raw","major","minor","patch","$78b7b712d16b89801a904c7270c1e2c9$require$MAX_SAFE_INTEGER","this","prerelease","split","map","id","test","num","build","format","join","toString","other","compareMain","comparePre","$78b7b712d16b89801a904c7270c1e2c9$require$compareIdentifiers","i","undefined","compareBuild","inc","release","identifier","push","isNaN","Error","$cf1f25ad1e322f0f16c891a65db87896$var$debug","process","env","NODE_DEBUG","args","console","error","Number","MAX_SAFE_COMPONENT_LENGTH","src","R","createToken","name","value","isGlobal","index","RegExp","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","$bb5a87160673d80adcb12a29f54bbf0f$require$MAX_SAFE_COMPONENT_LENGTH","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace","$edcd15e4b8e7040b02ccf24ccf5ede00$var$opts","filter","k","reduce","options1","$ed443dfb21bf5129d42addea1912c76d$var$numeric","$ed443dfb21bf5129d42addea1912c76d$var$compareIdentifiers","anum","bnum"],"version":3,"file":"compare.05805253.js.map"}