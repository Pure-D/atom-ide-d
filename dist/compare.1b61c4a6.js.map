{"mappings":"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","sources":["node_modules/semver/functions/compare.js","node_modules/semver/classes/semver.js","node_modules/semver/internal/debug.js","node_modules/semver/internal/constants.js","node_modules/semver/internal/re.js","node_modules/semver/internal/parse-options.js","node_modules/semver/internal/identifiers.js"],"sourcesContent":["const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier)\n        this.inc('pre', identifier)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier)\n        }\n        this.inc('pre', identifier)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (this.prerelease[0] === identifier) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0]\n            }\n          } else {\n            this.prerelease = [identifier, 0]\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format()\n    this.raw = this.version\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\nmodule.exports = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER,\n  MAX_SAFE_COMPONENT_LENGTH\n}\n","const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\n","// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl']\nconst parseOptions = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((options, k) => {\n    options[k] = true\n    return options\n  }, {})\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers\n}\n"],"names":[],"version":3,"file":"compare.1b61c4a6.js.map"}