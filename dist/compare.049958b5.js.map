{"mappings":"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","sources":["node_modules/.pnpm/semver@7.3.5/node_modules/semver/functions/compare.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/classes/semver.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/debug.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/constants.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/re.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/parse-options.js","node_modules/.pnpm/semver@7.3.5/node_modules/semver/internal/identifiers.js"],"sourcesContent":["const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier)\n        this.inc('pre', identifier)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier)\n        }\n        this.inc('pre', identifier)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre':\n        if (this.prerelease.length === 0) {\n          this.prerelease = [0]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            this.prerelease.push(0)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          if (this.prerelease[0] === identifier) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = [identifier, 0]\n            }\n          } else {\n            this.prerelease = [identifier, 0]\n          }\n        }\n        break\n\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.format()\n    this.raw = this.version\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\nmodule.exports = {\n  SEMVER_SPEC_VERSION,\n  MAX_LENGTH,\n  MAX_SAFE_INTEGER,\n  MAX_SAFE_COMPONENT_LENGTH\n}\n","const { MAX_SAFE_COMPONENT_LENGTH } = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst createToken = (name, value, isGlobal) => {\n  const index = R++\n  debug(index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*')\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCE', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\.0\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\.0\\.0-0\\\\s*$')\n","// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = ['includePrerelease', 'loose', 'rtl']\nconst parseOptions = options =>\n  !options ? {}\n  : typeof options !== 'object' ? { loose: true }\n  : opts.filter(k => options[k]).reduce((options, k) => {\n    options[k] = true\n    return options\n  }, {})\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers\n}\n"],"names":["module","exports","a","b","loose","$dVD8h","compare","$inmSx","MAX_LENGTH","MAX_SAFE_INTEGER","$ac3zA","re","t","compareIdentifiers","$a23ef4266495bbf9$var$SemVer","version","options","$4KAsJ","includePrerelease","TypeError","length","$a23ef4266495bbf9$require$MAX_LENGTH","$7smq9","this","m","trim","match","$a23ef4266495bbf9$require$re","$a23ef4266495bbf9$require$t","LOOSE","FULL","raw","major","minor","patch","$a23ef4266495bbf9$require$MAX_SAFE_INTEGER","prerelease","split","map","id","test","num","build","format","join","toString","other","compareMain","comparePre","other1","$a23ef4266495bbf9$require$compareIdentifiers","other2","i","undefined","compareBuild","other3","inc","release","identifier","push","isNaN","Error","$56dc8a3a1e9f5fff$var$debug","process","env","NODE_DEBUG","args","console","error","Number","MAX_SAFE_COMPONENT_LENGTH","src","R","createToken","name","value","isGlobal","index","RegExp","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","PRERELEASE","BUILD","FULLPLAIN","MAINVERSIONLOOSE","PRERELEASELOOSE","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","$76bdcbe5320ddd55$require$MAX_SAFE_COMPONENT_LENGTH","COERCE","LONETILDE","tildeTrimReplace","LONECARET","caretTrimReplace","comparatorTrimReplace","$3757bdf88a41a032$var$opts","options1","filter","k","reduce","$fafe1d01df1a48c7$var$numeric","$fafe1d01df1a48c7$var$compareIdentifiers","anum","bnum"],"version":3,"file":"compare.049958b5.js.map"}