{"mappings":"mSA0BSA,EAAkBC,GACzB,OAAOC,EAAAC,WAAWF,GAGaG,eAClBC,EAAiBC,GAC9B,QAEkBC,EAChB,OAD4B,QAAZA,SADMC,EAASF,EAAM,CAAC,eAAeG,OAC9BC,MAAK,qBAAZ,IAAAH,OAAA,EAAAA,EAA6B,GAE7C,MAAOI,GAEP,YADAC,QAAQC,MAAMF,mBA+BIG,IACpB,MAAMC,EAAaC,EAAAC,KAAKD,EAAAE,QAAQC,WAAY,QAGtCC,EAAiB,WADmB,UAArBC,QAAQC,SAAuB,OAAS,IAGvDC,EAAsBP,EAAAC,KAAKF,EAAU,GAAKM,QAAQC,YAAYD,QAAQG,QAEtEC,kBApEN,MAAMC,EAAOL,QAAQM,IAAIC,KACzB,GAAoB,iBAATF,GAA8B,KAATA,GAAoC,UAArBL,QAAQC,SACrD,aAAUpB,EAAAC,WAAWa,EAAAC,KAAKS,EAAM,SAAU,UACjCV,EAAAC,KAAKS,EAAM,SAAU,QAAS,SAAU,OAExCV,EAAAC,KAAKS,EAAM,UAAW,OAE1B,GAAyB,UAArBL,QAAQC,SAAsB,CACvC,MAAMO,EAAUR,QAAQM,IAAIG,QAC5B,GAAuB,iBAAZD,GAAoC,KAAZA,EACjC,OAAOb,EAAAC,KAAKY,EAAS,SAAU,YAE5B,GAAoB,iBAATH,GAA8B,KAATA,EACrC,OAAOV,EAAAC,KAAKS,EAAM,UAAW,OAE/B,MAAO,IAqDsBK,GACvB9B,EAAae,EAAAC,KAAKQ,EAAgBL,GAExC,GAAIG,EAAqB,CACvB,MAAMS,EAAoBhB,EAAAC,KAAKM,EAAqBH,SACxCpB,EAAkBC,SAvCwCG,OAC1C6B,EAAmBC,KAEjD,MAAMC,QAAuBC,EAAA,UACtBC,EAAcC,SAAuBC,QAAQC,IAAI,CAACnC,EAAiB4B,GAAY5B,EAAiB6B,KACvG,MAC0B,iBAAjBG,GACkB,iBAAlBC,GACU,KAAjBD,GACkB,KAAlBC,IAEsD,IAA/CH,EAAcE,EAAcC,IA4BmBG,CAAiBxC,EAAY+B,gBArB7DT,EAA6BE,KACrD,MAAOiB,KAACA,SAAeC,+CACvBC,KAAKC,cAAcC,QAAQ,0CAErBJ,EAAKnB,EAAqBE,EAAgB,CAAEsB,WAAW,IAC7DH,KAAKC,cAAcG,WAAW,oCAiBpBC,CAAW1B,EAAqBE,cAG5BzB,EAAkBC,IAC5B2C,KAAKC,cAAcK,SAAQ,uCACc7B,QAAQC,sEAKpCG,wBAClB,OAAAxB,wGAxFD,MAAMO,EAAW2C,EAAAC,UAAUC,EAAAC,yCCL3BC,EAAAC,QAAkBjB,QAAQkB,QAAOC,QAAqB,2CAAiDC,MAAI,IAAOvB,EAAc","sources":["src/installation.ts","node_modules/.pnpm/@parcel+runtime-js@2.0.1_@parcel+core@2.0.1/node_modules/@parcel/runtime-js/lib/runtime-214affa8b255b064.js"],"sourcesContent":["import { pathExists } from \"fs-extra\"\nimport { join, dirname } from \"path\"\n\nimport { execFile as execFileRaw } from \"child_process\"\nimport { promisify } from \"util\"\nconst execFile = promisify(execFileRaw)\n\nasync function getCodeDBinFolder() {\n  const home = process.env.HOME\n  if (typeof home === \"string\" && home !== \"\" && process.platform === \"linux\") {\n    if (await pathExists(join(home, \".local\", \"share\"))) {\n      return join(home, \".local\", \"share\", \"code-d\", \"bin\")\n    } else {\n      return join(home, \".code-d\", \"bin\")\n    }\n  } else if (process.platform === \"win32\") {\n    const appdata = process.env.APPDATA\n    if (typeof appdata === \"string\" && appdata !== \"\") {\n      return join(appdata, \"code-d\", \"bin\")\n    }\n  } else if (typeof home === \"string\" && home !== \"\") {\n    return join(home, \".code-d\", \"bin\")\n  }\n  return \"\"\n}\n\nfunction isServeDInstalled(serveDPath: string) {\n  return pathExists(serveDPath)\n}\n\n/** Get the version of serve-d */\nasync function getServeDVersion(file: string) {\n  try {\n    const output = (await execFile(file, [\"--version\"])).stderr\n    const version = output.match(/v(\\d\\S*)\\s/)?.[1]\n    return version\n  } catch (e) {\n    console.error(e)\n    return undefined\n  }\n}\n\n/** Check if the given serve-d is up to date against the target version */\nasync function isServeDUpToDate(givenFile: string, targetFile: string) {\n  // @ts-ignore\n  const semverCompare = (await import(\"semver/functions/compare\")) as typeof import(\"semver/functions/compare\")\n  const [givenVersion, targetVersion] = await Promise.all([getServeDVersion(givenFile), getServeDVersion(targetFile)])\n  if (\n    typeof givenVersion === \"string\" &&\n    typeof targetVersion === \"string\" &&\n    givenVersion !== \"\" &&\n    targetVersion !== \"\"\n  ) {\n    return semverCompare(givenVersion, targetVersion) !== -1\n  } else {\n    // assume given version is old\n    return false\n  }\n}\n\nasync function copyServeD(bundledServerFolder: string, codeDBinFolder: string) {\n  const { copy } = await import(\"fs-extra\")\n  atom.notifications.addInfo(\"Installing/Updating D servers...\")\n  // copy the whole served folder\n  await copy(bundledServerFolder, codeDBinFolder, { overwrite: true })\n  atom.notifications.addSuccess(\"D servers was installed/updated\")\n}\n\nexport async function installServeD() {\n  const distFolder = join(dirname(__dirname), \"dist\")\n\n  const exeExtention = process.platform === \"win32\" ? \".exe\" : \"\"\n  const serveDExeFileName = `serve-d${exeExtention}`\n\n  const bundledServerFolder = join(distFolder, `${process.platform}-${process.arch}`)\n\n  const codeDBinFolder = await getCodeDBinFolder()\n  const serveDPath = join(codeDBinFolder, serveDExeFileName)\n\n  if (bundledServerFolder) {\n    const bundledServeDPath = join(bundledServerFolder, serveDExeFileName)\n    if (!(await isServeDInstalled(serveDPath)) || !(await isServeDUpToDate(serveDPath, bundledServeDPath))) {\n      await copyServeD(bundledServerFolder, codeDBinFolder)\n    }\n  } else {\n    if (!(await isServeDInstalled(serveDPath))) {\n      atom.notifications.addError(\n        `serve-d binary is not available for ${process.platform}.\n        Please built it from the source, place it under ${codeDBinFolder}, and restart Atom.`\n      )\n    }\n  }\n  return serveDPath\n}\n","module.exports = (Promise.resolve(__parcel__require__(\"./\" + \"compare.049958b5.js\"))).then(() => parcelRequire('882zr'));"],"names":["$3ff1ff004a9ddf5d$var$isServeDInstalled","serveDPath","$bJ3MD$fsextra","pathExists","async","$3ff1ff004a9ddf5d$var$getServeDVersion","file","ref","$3ff1ff004a9ddf5d$var$execFile","stderr","match","e","console","error","$3ff1ff004a9ddf5d$export$5e5a8196367a5801","distFolder","$bJ3MD$path","join","dirname","__dirname","serveDExeFileName","process","platform","bundledServerFolder","arch","codeDBinFolder","home","env","HOME","appdata","APPDATA","$3ff1ff004a9ddf5d$var$getCodeDBinFolder","bundledServeDPath","givenFile","targetFile","semverCompare","parcelRequire","givenVersion","targetVersion","Promise","all","$3ff1ff004a9ddf5d$var$isServeDUpToDate","copy","$3ff1ff004a9ddf5d$importAsync$8ed180d50d8d002d","atom","notifications","addInfo","overwrite","addSuccess","$3ff1ff004a9ddf5d$var$copyServeD","addError","$bJ3MD$util","promisify","$bJ3MD$child_process","execFile","module","exports","resolve","require","then"],"version":3,"file":"installation.5e78f2a5.js.map"}